#! /usr/bin/env python3
# google_forms_data.py - Collects a list of email addresses from a Google Form

import logging
import ezsheets
import sys
from pathlib import Path

logging.basicConfig(
    level=logging.DEBUG, format=" %(asctime)s - %(levelname)s - %(message)s"
)
logging.disable(logging.DEBUG)


# Get a sheet id to open the worksheet, .listSpreadsheets() stores Google Sheets in a dict as {sheet_id:sheet_name}
def get_sheet_id(sheet_name):
    sheets = ezsheets.listSpreadsheets()
    if sheet_name not in sheets.values():
        raise Exception("This worksheet was not found in Google Drive")
    for sheet_id in sheets:
        if sheets[sheet_id] == sheet_name:
            logging.debug(sheet_id)
            return sheet_id


# Get a list of e-mail addresses from the spreadsheet
def get_email_addresses(sheet_id):
    spreadsheet = ezsheets.Spreadsheet(sheet_id)
    logging.debug(spreadsheet.title)
    # Working with the 'active' sheet as the spreadsheet generated by the form will only have 1 sheet
    sheet = spreadsheet[0]
    columns = sheet.getColumns()
    # Loop through every cell in every column looking for '@' to find e-mail addresses.
    # This could be more specific depending on the criteria of the form used, in the case of the form I used for this excercise
    # the e-mail address input is the only input that should contain a '@' symbol.
    email_addresses = [
        cell for column, cells in enumerate(columns) for cell in cells if "@" in cell
    ]
    if email_addresses == []:
        raise Exception("There are no e-mail addresses in this spreadsheet.")
    logging.debug(email_addresses)
    return email_addresses


def write_email_to_file(sheet_name, email_addresses):
    logging.debug(email_addresses)
    text_file_name = f"{sheet_name}_emails"
    # Check to see if the text file already exists
    if Path(f"{text_file_name}").absolute() not in Path.cwd().iterdir():
        text_file = open(Path(f"{text_file_name}").absolute(), "a")  # If not create it
        logging.debug(text_file.name)
        print(f"Writing e-mail addresses to {Path(text_file_name).absolute()}")
        for email in email_addresses:  # Write emails to text file
            text_file.write(f"{email}\n")
        text_file.close()
    else:
        text_file = open(
            Path(f"{text_file_name}").absolute(), "r"
        )  # Read contents of file
        contents = text_file.read()
        text_file.close()
        text_file = open(
            Path(f"{text_file_name}").absolute(), "a"
        )  # Open in append mode
        for email in email_addresses:  # Write content
            if email not in contents:
                text_file.write(f"{email}\n")
                print(
                    f"E-mail addres: {email} appended to {Path(text_file_name).absolute()}"
                )

        text_file.close()


def main():
    # Define the name of the spreadsheet we will be working with
    if len(sys.argv) >= 2:
        sheet_name = sys.argv[1]
    else:
        raise Exception("No spreadsheet name given.")
    sheet_id = get_sheet_id(sheet_name)
    email_addresses = get_email_addresses(sheet_id)
    write_email_to_file(sheet_name, email_addresses)


if __name__ == "__main__":
    main()
